From 6799700251fffb8e69a27cd16cd852980e45e7e9 Mon Sep 17 00:00:00 2001
From: Brijesh Bhalala <brijeshbhalala2324@gmail.com>
Date: Thu, 4 Jul 2024 14:59:17 +0530
Subject: [PATCH] Implemented login logout functionality with handling access
 and refresh tokens

---
 src/app/dashboard/yuvak/page.js      | 11 ++---
 src/components/auth/sign-in-form.tsx | 43 +++++++----------
 src/lib/auth/client.ts               | 47 +++++++++++++-----
 src/utils/FetchApi.js                | 72 +++++++++++++++++++++-------
 4 files changed, 112 insertions(+), 61 deletions(-)

diff --git a/src/app/dashboard/yuvak/page.js b/src/app/dashboard/yuvak/page.js
index 4a57031..5f1d137 100644
--- a/src/app/dashboard/yuvak/page.js
+++ b/src/app/dashboard/yuvak/page.js
@@ -14,7 +14,7 @@ import { YuvakAdd } from '@/components/dashboard/yuvak/YuvakAdd';
 import { YuvakTable } from '@/components/dashboard/yuvak/YuvakTable';
 import { useUserStore } from "@/store/UseStore";
 import { Card, InputAdornment, OutlinedInput } from '@mui/material';
-import { fetchApi } from '@/utils/FetchApi';
+import axiosInstance, { fetchApi } from '@/utils/FetchApi';
 
 export default function Page() {
   const [openAddModal, setOpenAddModal] = useState(false);
@@ -28,11 +28,10 @@ React.useEffect(()=>{
   const requestSearch = async() => {
     try {
       let data;
-      const profResp = await fetchApi({
-        method:"get",
-        url: "user-profile/find-by-name-like",
-        params:{name:searchTerm}
-      });
+      const profResp = await axiosInstance.get(
+         "/user-profile/find-by-name-like",
+        {params:{name:searchTerm}}
+      );
 
       data =profResp.data;
       setYuvakData(data)
diff --git a/src/components/auth/sign-in-form.tsx b/src/components/auth/sign-in-form.tsx
index 03ccb65..3dc4a7a 100644
--- a/src/components/auth/sign-in-form.tsx
+++ b/src/components/auth/sign-in-form.tsx
@@ -21,15 +21,16 @@ import { z as zod } from 'zod';
 import { paths } from '@/paths';
 import { authClient } from '@/lib/auth/client';
 import { useUser } from '@/hooks/use-user';
+import { InputAdornment } from '@mui/material';
 
 const schema = zod.object({
-  email: zod.string().min(1, { message: 'Email is required' }).email(),
-  password: zod.string().min(1, { message: 'Password is required' }),
+  phoneNumber: zod.string().min(1, { message: 'Phone No is required' }),
+  mpin: zod.string().min(1, { message: 'mpin is required' }),
 });
 
 type Values = zod.infer<typeof schema>;
 
-const defaultValues = { email: 'aym.dahisar@gmail.io', password: 'aym369' } satisfies Values;
+const defaultValues = { phoneNumber: '', mpin: '' } satisfies Values;
 
 export function SignInForm(): React.JSX.Element {
   const router = useRouter();
@@ -39,13 +40,13 @@ export function SignInForm(): React.JSX.Element {
   const [showPassword, setShowPassword] = React.useState<boolean>();
 
   const [isPending, setIsPending] = React.useState<boolean>(false);
-
+  31
   const {
     control,
     handleSubmit,
     setError,
     formState: { errors },
-  } = useForm<Values>({ defaultValues, resolver: zodResolver(schema) });
+  } = useForm<Values>({defaultValues,resolver: zodResolver(schema) });
 
   const onSubmit = React.useCallback(
     async (values: Values): Promise<void> => {
@@ -84,21 +85,23 @@ export function SignInForm(): React.JSX.Element {
         <Stack spacing={2}>
           <Controller
             control={control}
-            name="email"
+            name="phoneNumber"
             render={({ field }) => (
-              <FormControl error={Boolean(errors.email)}>
-                <InputLabel>Email address</InputLabel>
-                <OutlinedInput {...field} label="Email address" type="email" />
-                {errors.email ? <FormHelperText>{errors.email.message}</FormHelperText> : null}
+              <FormControl error={Boolean(errors.phoneNumber)}>
+                <InputLabel>Phone No</InputLabel>
+                <OutlinedInput {...field} label="Phone No" type="number"
+                 startAdornment={<InputAdornment position="start">+91</InputAdornment>}
+                placeholder="Enter phone number" />
+                 {errors.phoneNumber ? <FormHelperText>{errors.phoneNumber.message}</FormHelperText> : null} 
               </FormControl>
             )}
           />
           <Controller
             control={control}
-            name="password"
+            name="mpin"
             render={({ field }) => (
-              <FormControl error={Boolean(errors.password)}>
-                <InputLabel>Password</InputLabel>
+              <FormControl  error={Boolean(errors.mpin)}>
+                <InputLabel>MPIN</InputLabel>
                 <OutlinedInput
                   {...field}
                   endAdornment={
@@ -121,9 +124,9 @@ export function SignInForm(): React.JSX.Element {
                     )
                   }
                   label="Password"
-                  type={showPassword ? 'text' : 'password'}
+                  type={showPassword ? 'number' : 'password'}
                 />
-                {errors.password ? <FormHelperText>{errors.password.message}</FormHelperText> : null}
+                 {errors.mpin ? <FormHelperText>{errors.mpin.message}</FormHelperText> : null} 
               </FormControl>
             )}
           />
@@ -138,16 +141,6 @@ export function SignInForm(): React.JSX.Element {
           </Button>
         </Stack>
       </form>
-      <Alert color="warning">
-        Use{' '}
-        <Typography component="span" sx={{ fontWeight: 700 }} variant="inherit">
-          aym.dahisar@gmail.io
-        </Typography>{' '}
-        with password{' '}
-        <Typography component="span" sx={{ fontWeight: 700 }} variant="inherit">
-          aym369
-        </Typography>
-      </Alert>
     </Stack>
   );
 }
diff --git a/src/lib/auth/client.ts b/src/lib/auth/client.ts
index 7fc9f4c..722fb65 100644
--- a/src/lib/auth/client.ts
+++ b/src/lib/auth/client.ts
@@ -1,6 +1,8 @@
 'use client';
 
-import type { User } from '@/types/user';
+import type { User } from '@/types/user'
+import * as qs from 'qs'
+import axiosInstance, { fetchApi } from '@/utils/FetchApi';
 
 function generateToken(): string {
   const arr = new Uint8Array(12);
@@ -28,8 +30,8 @@ export interface SignInWithOAuthParams {
 }
 
 export interface SignInWithPasswordParams {
-  email: string;
-  password: string;
+  phoneNumber: number;
+  mpin: number;
 }
 
 export interface ResetPasswordParams {
@@ -51,18 +53,36 @@ class AuthClient {
     return { error: 'Social authentication not implemented' };
   }
 
-  async signInWithPassword(params: SignInWithPasswordParams): Promise<{ error?: string }> {
-    const { email, password } = params;
+  async signInWithPassword(params: {phoneNumber:number, mpin:number}): Promise<{ error?: unknown }> {
+    const { phoneNumber, mpin } = params;
 
-    // Make API request
+try{
+
+  
+  const profResp = await axiosInstance.post(
+     "/user-auth/phone/login-with-phone-no-mpin",
+    { phoneNumber: `+91${phoneNumber}` , mpin }
+  );
+
+ 
+  const access_token = profResp.data.access_token
+  const refresh_token = profResp.data.refresh_token
+  localStorage.setItem('access_token', access_token);
+  localStorage.setItem('refresh_token', refresh_token);
+}
+  catch(error){
+console.log("Error while login",error);
+if (error) {
+  return { error: 'Invalid credentials' };
+}
+  }// Make API request
 
     // We do not handle the API, so we'll check if the credentials match with the hardcoded ones.
-    if (email !== 'aym.dahisar@gmail.io' || password !== 'aym369') {
-      return { error: 'Invalid credentials' };
-    }
+    // if (email !== 'aym.dahisar@gmail.io' || password !== 'aym369') {
+    //   return { error: 'Invalid credentials' };
+    // }
 
-    const token = generateToken();
-    localStorage.setItem('custom-auth-token', token);
+   
 
     return {};
   }
@@ -79,7 +99,7 @@ class AuthClient {
     // Make API request
 
     // We do not handle the API, so just check if we have a token in localStorage.
-    const token = localStorage.getItem('custom-auth-token');
+    const token = localStorage.getItem('access_token');
 
     if (!token) {
       return { data: null };
@@ -89,7 +109,8 @@ class AuthClient {
   }
 
   async signOut(): Promise<{ error?: string }> {
-    localStorage.removeItem('custom-auth-token');
+    localStorage.removeItem('access_token');
+    localStorage.removeItem('refresh_token');
 
     return {};
   }
diff --git a/src/utils/FetchApi.js b/src/utils/FetchApi.js
index f158470..fc30fb0 100644
--- a/src/utils/FetchApi.js
+++ b/src/utils/FetchApi.js
@@ -1,19 +1,57 @@
-import axios from "axios";
-
-const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDA0MSwiZW1haWwiOm51bGwsImFrc2hhcklkIjoiQUMxNDA0MSIsImlhdCI6MTcxOTA2MzQ1MywiZXhwIjoxNzE5MDc0MjUzfQ.tU0mImg1n4hW_dHD8WcO4ByYpZvIUNWxhZ17HLMyvd4";
-const  fetchApi=async(axiosConfig)=> {
-    const configs = {
-        ...axiosConfig,
-      };
-      axios.defaults.baseURL = 'https://ac-be-app-prod-spyo2pxfka-el.a.run.app'
-      axios.defaults.headers.common = {'Authorization': `bearer ${token}`}
-
-  try {
-    const resp = await axios(configs);
-    return resp;
-  } catch (error) {
-    throw error;
-  }
+import axios from 'axios';
+
+async function refreshToken() {
+  const refreshTokens = localStorage.getItem("refresh_token");
+
+  const refreshTokenInstance = axios.create({
+    baseURL: 'https://ac-be-app-prod-spyo2pxfka-el.a.run.app/user-auth/refresh',
+  });
+
+  refreshTokenInstance.defaults.headers.common["Authorization"] = `Bearer ${refreshTokens}`;
+  const response = await refreshTokenInstance.post(
+    ""
+  );
+
+  const data = response.data.access_token
+  localStorage.setItem("access_token", data);
+  return data; 
 }
 
-export  {fetchApi}
\ No newline at end of file
+const axiosInstance = axios.create({
+  baseURL: 'https://ac-be-app-prod-spyo2pxfka-el.a.run.app',
+});
+
+const handleRequest = (config) => {
+  const authToken = localStorage.getItem("access_token");
+  if (authToken) {
+    config.headers.Authorization = `Bearer ${authToken}`;
+  }
+  return config;
+};
+
+const handleResponse = (response) => {
+  return response;
+};
+
+const handleError = async (error) => {
+  if (error.response && error.response.status === 401) {
+    try {
+      const newToken = await refreshToken();
+      axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${newToken}`;
+
+      const originalRequest = error.config;
+      originalRequest.headers.Authorization = `Bearer ${newToken}`;
+
+      return axios(originalRequest);
+    } catch (refreshError) {
+      console.error('Failed to refresh token:', refreshError);
+      return Promise.reject(refreshError);
+    }
+  }
+  return Promise.reject(error);
+};
+
+axiosInstance.interceptors.request.use(handleRequest);
+axiosInstance.interceptors.response.use(handleResponse, handleError);
+
+export default axiosInstance;
\ No newline at end of file
-- 
2.25.1

